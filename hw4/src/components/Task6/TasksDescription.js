export const TaskDescription1 = () => {
    return (
        <div>
Задача №1. Робота з Toggler HOC  - відповідає за функціоналом тоглера (переключення стану  true/false) <br/>
1.	Створити компонент User тa Todo, withToggler<br/>
•	User рендерить дані юзера<br/>
•	Album  - рендерить дані альбома<br/>
•	withToggler – HOC, який забезпечує функціонал тоглера<br/>
2.	User:<br/>
•	дані для поста можна скопіювати тут - https://jsonplaceholder.typicode.com/users/1<br/>
•	рендерить данні username, email, a також детальну інформацію про юзера: address (city, street, suit), phone, company (name)<br/>
та кнопку “See details” / “hide details”<br/>
•	при початковому рендері детальна інформація прихована, назва кнопки “See details”.<br/>
•	при кліці на кнопку в стані “See details” – показуємо детальну інформацію і змінюємо назву кнопки на “Hide details”<br/>
•	при кліці на кнопку в стані “ Hide details ” – показуємо детальну інформацію і змінюємо назву кнопки на “ See details”<br/>
3.	Album :<br/>
•	****дані для альбому можна отримати тут - https://jsonplaceholder.typicode.com/albums/1/photos (перший елемент масиву)<br/>
•	показує – назву альбома і його картинку<br/>
•	Кнопка міняє свій статус (подобається / НЕ подобається) при кліці.<br/>
Іконки для кнопки можна отримати тут -  https://www.flaticon.com/free-icons/heart<br/>
4.	Логіку для toggled винести в HOC – withToggler.<br/>
Постачає WrappedComponent пропсами:<br/>
toggled  (стан тоглера true/false) і changeToggled (функція для зміни стану тоглера)
        </div>
    )
}

export const TaskDescription2 = () => {
    return (
        <div>
Задача №2 Робота з Fetching Data HOC, який відповідає за функціонал для асинхронного запиту.<br/>
2.1. Створити наступні компоненти: UsersList, User, AlbumsList, Album, withFetchingData<br/>
•	UsersList – список усіх юзерів (тобто список із User).<br/>
•	User – описує 1 юзера (username, email, address, phone, company)<br/>
•	AlbumsList – список усіх коментарів (Comment)<br/>
•	Album – описує 1 альбом (title)<br/>
•	withFetchingData – HOC з функціоналом роботи з асинхронним кодом (запит на сервер, отримання даних, стан загрузки, наявність помилки)<br/>
2.2. Списки (UsersList та AlbumsList)<br/>
•	логіку по роботі із асинхронним кодом отримують із HOC – withFetchingData (див.п2.3), який снабжає їх відповідними пропсами:<br/>
data (результат загрузки – масив певних даних),  isLoading (стан загрузки), error (текст помилки)<br/>
•	показують компонент Loader, якщо йде загрузка відповідних списків<br/>
•	показують компонент Error, якщо наявна помилка при запиті<br/>
•	рендерять відповідні списки – результат запиту<br/>
Примітки:<br/>
•	в якості компонентів Loader і Error можна відобразити `div` з відповідним текстом<br/>
•	компоненти User та Album можна взяти iз попереднього завдання<br/>
2.3.  HOC -  withFetchingData<br/>
•	робить асинхронний запит<br/>
•	забезпечує WrappedComponent наступними даними:<br/>
data (результат загрузки даних),  isLoading (стан загрузки), error (текст помилки)<br/>
•	сcилка для запиту отримується із пропса url компонента, створеного за допомогою нашого HOC<br/>
2.4. Ендпоінти для запитів:<br/>
•	юзерів -  https://jsonplaceholder.typicode.com/users?_limit=10<br/>
•	альбоми - https://jsonplaceholder.typicode.com/albums/1/photos?_limit=10
        </div>
    )
}

export const TaskDescription3 = () => {
    return (
        <div>
Задание №3 - работа с render-props<br/>
1.	Создать компоненты App , DataMaker , Posts , Post<br/>
2.	Компонент App<br/>
a)	Хранит в себе переменную с url - https://jsonplaceholder.typicode.com/todos?_limit=10<br/>
b)	Внутри себя рендерит div , в котором вложен компонент DataMaker<br/>
c)	В DataMaker передается два пропс - url (со значением переменной url) ,и проп renderDataUrl -который в себе использует паттерн render props , а именно принимает data и прокидывай их в компонент Posts в виде пропа<br/>
3.	Компонент DataMaker - это функциональный компонент ,который принимает в себя параметры url , и renderDataUrl
a)	Внутри себя компонент имеет состояние posts (в нем буду хранится посты)<br/>
b)	Внутри себя выполняется запрос на сервер - используя prop url (который пришел ранее)<br/>
c)	Данные полученые с сервера кладутся в state постов<br/>
d)	Функциональный компонент возвращает div в котором происходит вызов функции renderDataUrl с передачей постов из state<br/>
4.	Компоненты Posts && Post только отображают данные полученые в пропах<br/>
a)	Posts получает проп с постами и рисует список, внутри списка рендерятся компоненты Post<br/>
b)	В компонент Post передавать все значение одним пропом<br/>
c)	Компонент Post -принимает пропы и рисует разметку вида<br/>
        </div>
    )
}

export const TaskDescription4 = () => {
    return (
        <div>
Задание №4: Создание компонента Tooltip (всплывающая подсказка) для карт продуктов с использованием паттерна render-props<br/>
1.	Создание обязательных компонентов:<br/>
•	ProductCardList - список всех карточек<br/>
•	ProductCard – карточка о продукте<br/>
•	Tooltip - всплывающая подсказка<br/>
1.	ProductCard:<br/>
•	изначально показывает картинку продукта, название и описание.<br/>
•	при наведении на картинку продукта (далее - Компонент) – показывает Tooltip с дополнительной информацией<br/>
1.	Всплывающая подсказка должна отображаться при наведении пользователя на Компонент (событие MouseEnter) и скрыться, когда пользователь уходит с него (событие MouseLeave).  При перемещении мышки в пределах Компонента, за ней движется и подсказка (событие MouseMove)<br/>
2.	Tooltip<br/>
4.1. содержит всю логику по отображению подсказки:<br/>
•	отслеживает показывать подсказку или нет ( isTooltipShown ) , х/y позиции для отображения подсказки ( tooltipX / tooltipY )<br/>
•	функцию-тоглер (показать/спрятать подсказку)<br/>
•	функцию для изменения х/y позиций подсказки при движении мышки<br/>
4.2  рендерит:<br/>
•	Компонент (при помощи render-props)<br/>
•	и саму подсказку (отпозиционированный div + контент подсказки, внутри этого div)<br/>
4.3. принимает 2 пропа:<br/>
а) render, который должен быть функцией. Т.е здесь будем реализовывать Render Props.<br/>
b) content – содержимое подсказки (название продукта, цену и рейтинг.)<br/>
4.4.  Колбек-функция  для пропа render будет:<br/>
•	принимать аргументом функцию-тоглер для подсказки + функцию для изменения х/y позиций подсказки,<br/>
•	и возвращать Компонент<br/>
5.	Линка для получения данных с продуктами  - https://my.api.mockaroo.com/coffee.json?key=778301b0<br/>
6.	Стилизация произвольная
        </div>
    )
}

export const TaskDescription5 = () => {
    return (
        <div>
Завдання №5.<br/>
Реалізуйте функціонал із завдань 1-2 за допомогою кастомних хуків замість HOC-ів

        </div>
    )
}

export const TaskDescription6 = () => {
    return (
        <div>
Задание №6. React Router<br/>
1.   Создать роутинг для вышеуказанных задании<br/>
Каждое задание (твоё решений заданий 1-4) нужно рендерить на отдельной странице.<br/>
Taкже должны быть страницы  “Main” и “ Tasks Description ”<br/>
“Main” – это стартовая страница (path=”/”). Укажи для нее контент – “Это решение 4-го  домашнего задания от [твое имя].”<br/>
1.	Header должен содержать линки (ссылки) и кнопку возврата на предыдущую страницу.<br/>
Он должен бить закреплён вверху и отображаться на всех страницах.<br/>
Название ссылок соответствует названию заданий (task 1, task 2 и т.д)<br/>
Стилизация ссылки, которая отвечает за страницу на которой мы находимся, должна отличаться от остальных ссылок.<br/>
1.	Для кнопки возврата можно скачать стрелочку, которая тебе понравиться здесь: https://icon-icons.com/download/72692/SVG/512/<br/>
При клике на стрелочку нас возвращает на страницу, на которой мы находились до этого (напр. изначально мы были на странице task 3,<br/> далее по ссылке перешли на  task 1. Теперь при нажатии на кнопку возврата  нас возвразает обратно на страницу task 3)<br/>
1.	Также отдельно создай страницу Tasks Description. Здесь у нас будет описание заданий, которые у тебя есть.<br/>
4.1 При переходе на эту страницу будем изначально видеть только название задание:<br/>
1.	Task #1 - Toggler HOC<br/>
2.	Task #2 – Fetching Data HOC<br/>
3.	Task #3 - render-props<br/>
4.	Task #4: - Tooltip<br/>
4.2 При клике на каждое задание внизу под списком показываем детальную информацию об этом задание.<br/>
При этом путь до задания должен выглядеть так: description*/*idЗадания.<br/>
Напр.. если description/3 – то отображаем описание к заданию #3<br/>
Для  написания этого роута используйте вложенные роуты (nested routes), напр.<br/>
https://lh6.googleusercontent.com/ovtA5ri8sHzzul0OSsfJmrHIctCCpdYPcLHW9Ly2J-WQRGA03FsjVfPPP3hPGyC9lzeigJZW3IqUaATEGS2dsCGsPy9fmuve0NRuwTOnAjLXMzSVX7dTIyNs0bnSa_ouJsvFxFhz_Jf7f_8Z4Gg-yg<br/>
5.	Если попытаемся ввести путь, которого у нас не существует, нас перебрасывает на страницу “Main”
        </div>
    )
}